{"ast":null,"code":"import config from '../config';\nconst API_URL = `${config.apiBaseUrl}/api/videogames`;\nexport const VideoGamesApi = {\n  async getAll() {\n    //TODO: Add Filter\n    const response = await fetch(API_URL);\n    if (!response.ok) throw new Error('Failed to fetch video games');\n    return response.json();\n  },\n  async create(game) {\n    // TODO: return some response\n    const response = await fetch(API_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(game)\n    });\n    if (!response.ok) throw new Error('Failed to create game');\n  },\n  async getById(id) {\n    const response = await fetch(`${API_URL}/${id}`);\n    if (!response.ok) throw new Error('Failed to fetch video game');\n    return response.json();\n  },\n  async update(id, game) {\n    const response = await fetch(`${API_URL}/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(game)\n    });\n    if (!response.ok) throw new Error('Failed to update game');\n  }\n};","map":{"version":3,"names":["config","API_URL","apiBaseUrl","VideoGamesApi","getAll","response","fetch","ok","Error","json","create","game","method","headers","body","JSON","stringify","getById","id","update"],"sources":["C:/Users/Tamal PC/OneDrive/Desktop/Projects/TDGaming/tdgaming-client/src/api/VideoGamesApi.tsx"],"sourcesContent":["\r\nimport config from '../config';\r\nimport { VideoGame } from '../interfaces/VideoGame';\r\n\r\nconst API_URL = `${config.apiBaseUrl}/api/videogames`;\r\n\r\nexport const VideoGamesApi = {\r\n    async getAll(): Promise<VideoGame[]> { //TODO: Add Filter\r\n      const response = await fetch(API_URL);\r\n      if (!response.ok) throw new Error('Failed to fetch video games');\r\n      return response.json();\r\n    },\r\n    async create(game: VideoGame): Promise<void>{  // TODO: return some response\r\n        const response = await fetch(API_URL, {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(game),\r\n          });\r\n          if (!response.ok) throw new Error('Failed to create game');\r\n    },\r\n    async getById(id: string): Promise<VideoGame> {\r\n        const response = await fetch(`${API_URL}/${id}`);\r\n        if (!response.ok) throw new Error('Failed to fetch video game');\r\n        return response.json();\r\n    },\r\n    async update(id: string, game: VideoGame): Promise<void> {\r\n        const response = await fetch(`${API_URL}/${id}`, {\r\n          method: 'PUT',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify(game),\r\n        });\r\n        if (!response.ok) throw new Error('Failed to update game');\r\n    }\r\n};"],"mappings":"AACA,OAAOA,MAAM,MAAM,WAAW;AAG9B,MAAMC,OAAO,GAAG,GAAGD,MAAM,CAACE,UAAU,iBAAiB;AAErD,OAAO,MAAMC,aAAa,GAAG;EACzB,MAAMC,MAAMA,CAAA,EAAyB;IAAE;IACrC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,CAAC;IACrC,IAAI,CAACI,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChE,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EACD,MAAMC,MAAMA,CAACC,IAAe,EAAgB;IAAG;IAC3C,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAE;MAClCW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;IAC3B,CAAC,CAAC;IACF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAChE,CAAC;EACD,MAAMS,OAAOA,CAACC,EAAU,EAAsB;IAC1C,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,IAAIiB,EAAE,EAAE,CAAC;IAChD,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;IAC/D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC1B,CAAC;EACD,MAAMU,MAAMA,CAACD,EAAU,EAAEP,IAAe,EAAiB;IACrD,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,OAAO,IAAIiB,EAAE,EAAE,EAAE;MAC/CN,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;IAC3B,CAAC,CAAC;IACF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,uBAAuB,CAAC;EAC9D;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}